// <auto-generated />
using System;
using Handy.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Handy.Infrastructure.Migrations
{
    [DbContext(typeof(HandyDbContext))]
    [Migration("20190301233323_ReminderTable")]
    partial class ReminderTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Handy.Domain.AccountContext.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Login")
                        .HasColumnName("login");

                    b.Property<DateTime>("Modified")
                        .HasColumnName("modified");

                    b.Property<string>("Password")
                        .HasColumnName("password_hash");

                    b.Property<DateTime>("Registered")
                        .HasColumnName("registered");

                    b.Property<string>("ScreenName")
                        .HasColumnName("screen_name");

                    b.HasKey("Id");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.ToTable("accounts");
                });

            modelBuilder.Entity("Handy.Domain.NoteContext.Entities.Note", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<Guid>("AccountId")
                        .HasColumnName("account_id");

                    b.Property<string>("Content")
                        .HasColumnName("content");

                    b.Property<DateTime>("Created")
                        .HasColumnName("created");

                    b.Property<DateTime>("Modified")
                        .HasColumnName("modified");

                    b.Property<string>("Title")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("notes");
                });

            modelBuilder.Entity("Handy.Domain.TodoContext.Entities.Reminder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<Guid>("AccountId");

                    b.Property<string>("Content")
                        .HasColumnName("content");

                    b.Property<DateTime>("Created")
                        .HasColumnName("created");

                    b.Property<bool>("Enabled")
                        .HasColumnName("enabled");

                    b.Property<DateTime>("FireOn")
                        .HasColumnName("fire_on");

                    b.Property<DateTime>("Modified")
                        .HasColumnName("modified");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("reminders");
                });

            modelBuilder.Entity("Handy.Domain.TodoContext.Entities.Todo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .HasColumnName("created");

                    b.Property<bool>("Done")
                        .HasColumnName("done");

                    b.Property<DateTime>("Modified")
                        .HasColumnName("modified");

                    b.Property<string>("Title")
                        .HasColumnName("title");

                    b.Property<Guid>("TodoListId")
                        .HasColumnName("todo_list_id");

                    b.HasKey("Id");

                    b.HasIndex("TodoListId");

                    b.ToTable("todo_items");
                });

            modelBuilder.Entity("Handy.Domain.TodoContext.Entities.TodoList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<Guid>("AccountId")
                        .HasColumnName("account_id");

                    b.Property<DateTime>("Created")
                        .HasColumnName("created");

                    b.Property<DateTime>("Modified")
                        .HasColumnName("modified");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("todo_lists");
                });

            modelBuilder.Entity("Handy.Domain.NoteContext.Entities.Note", b =>
                {
                    b.HasOne("Handy.Domain.AccountContext.Entities.Account", "Account")
                        .WithMany("Notes")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Handy.Domain.TodoContext.Entities.Reminder", b =>
                {
                    b.HasOne("Handy.Domain.AccountContext.Entities.Account", "Account")
                        .WithMany("Reminders")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Handy.Domain.TodoContext.Entities.Todo", b =>
                {
                    b.HasOne("Handy.Domain.TodoContext.Entities.TodoList", "TodoList")
                        .WithMany("Todos")
                        .HasForeignKey("TodoListId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Handy.Domain.TodoContext.Entities.TodoList", b =>
                {
                    b.HasOne("Handy.Domain.AccountContext.Entities.Account", "Account")
                        .WithMany("TodoLists")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
